---
export interface KPIItem { label: string; value: number; prefix?: string; suffix?: string; }
const { items = [] as KPIItem[] } = Astro.props;
---
<section class="kpi r" aria-label="Key performance indicators">
  <div class="kpi-row" data-stagger>
    {items.map((k,i)=>(
      <div class="kpi-it" data-target={k.value} data-prefix={k.prefix||''} data-suffix={k.suffix||''} style={`--i:${i}`}>
        <div class="num">{k.prefix||''}<span class="count">0</span>{k.suffix||''}</div>
        <div class="label">{k.label}</div>
      </div>
    ))}
  </div>
  <style>
    .kpi{padding:clamp(16px,3vw,28px) 0}
    .kpi-row{display:grid;grid-template-columns:repeat(2,minmax(0,1fr));gap:16px}
    @media(min-width:840px){.kpi-row{grid-template-columns:repeat(4,minmax(0,1fr))}}
    .num{font-size:clamp(28px,5vw,44px);font-weight:800}
    .label{opacity:.75;margin-top:6px}
  </style>
  <script is:inline>
    const ro=matchMedia('(prefers-reduced-motion: reduce)').matches;
    const root=(Astro?.root)||document.currentScript.closest('section');
    const nodes=[...root.querySelectorAll('.kpi-it')];
    const count=(n)=>{const tgt=+n.dataset.target||0;const el=n.querySelector('.count');if(!el)return;
      if(ro){ el.textContent=tgt.toLocaleString(); return; }
      let s; const dur=Math.min(1600,Math.max(600,tgt*10)); const ease=t=>1-Math.pow(1-t,3);
      function step(t){if(!s) s=t; const p=Math.min(1,(t-s)/dur); el.textContent=Math.floor(ease(p)*tgt).toLocaleString(); if(p<1) requestAnimationFrame(step); else el.textContent=tgt.toLocaleString();}
      requestAnimationFrame(step);
    }
    const io=new IntersectionObserver((es,o)=>es.forEach(e=>{if(e.isIntersecting){count(e.target);o.unobserve(e.target)}}),{threshold:.3});
    nodes.forEach(n=>io.observe(n));
  </script>
</section>
